# -*- coding: utf-8 -*-
"""Wisconsin Breast Cancer TASK.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tU1rVleDEXpR4BTMgzJj6d5udSoDBPwp
"""

# Import necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

## Importing the necessary libraries for data manipulation(pandas) and visualization(matplotlib and seaborn).

# Load the dataset
data = pd.read_csv('breast-cancer-wisconsin-data.csv')
data.head()

## Loading the Wisconsin Breast Cancer Dataset from a CSV file and displaying the first few rows to understand its structure.

data.drop('id', axis=1, inplace=True)

##  This code removes the id column from the dataset. The id column is typically used as a unique identifier for each record and does not contribute to the predictive analysis. Dropping this column helps in focusing on the relevant features for the analysis.

# Check for missing values
missing_values = data.isnull().sum()
print(missing_values)

## This code identifies any missing values in the dataset by applying the isnull() function, which generates a DataFrame of boolean values. It then sums these values to count the number of missing entries in each column. The results are displayed to highlight any columns that might need data cleaning or imputation.

# Convert diagnosis column to numerical values
data['diagnosis'] = data['diagnosis'].map({'M': 1, 'B': 0})
print(data['diagnosis'].head())

 ## The diagnosis column, which originally contains categorical values ('M' for malignant and 'B' for benign), is converted to numerical values for analysis. 'M' is mapped to 1, and 'B' is mapped to 0. The head() function is used again to display the first few entries in the updated diagnosis column.

# Summarize dataset statistics(mean, median, count)
summary_stats = data.describe().T
summary_stats['median'] = data.median()
summary_stats['count'] = data.count()
print(summary_stats[['mean', 'median', 'count']])

## Summarizing the dataset to get an overview of the data. This includes calculating the mean, median, and count for each feature.

data.corr()

## Calculating the correlation matrix to understand the relationships between different features in the dataset.The resulting matrix shows the correlation coefficients between the features, which helps in understanding the relationships and dependencies among them. High correlation values (close to 1 or -1) indicate strong relationships, while values close to 0 indicate weak relationships.

# Visualize the data
# Create histograms for numerical featuers
data.hist(bins=15, figsize=(20, 15))
plt.suptitle('Histograms of Numerical Features', fontsize=20 )
plt.show()

## Creating histograms for numerical features to visualize their distributions. This helps in understanding the spread and central tendency of the data.

# Plot bar chart for categorical feature ('diagnosis'):
# Bar chart for diagnosis distribution
sns.countplot(x='diagnosis', data=data)
plt.xlabel('Diagnosis (0 = Benign, 1 = Malignant)')
plt.ylabel('Count')
plt.title('Distribution of Cancer Diagnoses (Malignant vs. Benign)')
plt.show()

## Plotting a bar chart to show the distribution of cancer diagnosis. This helps in visualizing the proportion of benign and malignant cases.

# Scatter plot for two features
sns.scatterplot(x='radius_mean', y='texture_mean', hue='diagnosis', data=data)
plt.title('Scatter Plot of Mean Radius vs. Mean Texture')
plt.show()

## Creating a scatter plot to visualize the relationship between 'radius_mean' and 'texture_mean' colored by diagnosis. This helps in identifying any patterns or correlations between these features.

# Distribution of cancer diagnoses
diagnosis_distribution = data['diagnosis'].value_counts()
print("\nDistribution of cancer diagnoses (0 = Benign, 1 = Malignant):\n", diagnosis_distribution)

##This code calculates and prints the distribution of cancer diagnoses to understand the balance of the dataset.

# Feature with the highest correlation with cancer diagnosis
correlation_matrix = data.corr()
highest_corr_feature = correlation_matrix['diagnosis'].sort_values(ascending=False).index[1]
print(f"\nThe feature with the highest correlation with cancer diagnosis is: {highest_corr_feature}")

## Calculating the correlation matrix to find the feature with the highest correlation with the cancer diagnosis. This helps in identifying the most significant predictor of cancer diagnosis.